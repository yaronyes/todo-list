{"version":3,"sources":["model/TodoModel.js","components/Todo.js","components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","text","id","uuid","isCompleted","this","Todo","props","todo","updateTodoStatus","deleteItem","useState","showDeleteBtn","setShowDeleteBtn","completed","setCompleted","show","setShow","onShowDeleteBtn","handleClose","className","onMouseOver","onMouseLeave","Row","Col","type","checked","onChange","e","target","changeStatus","onClick","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","Todos","value","setValue","todoList","setTodoList","selectedButton","setSelectedButton","map","todoId","filter","displayList","key","numberOfItemsLeft","length","placeholder","onKeyUp","event","keyCode","trim","md","ToggleButtonGroup","name","defaultValue","ToggleButton","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6bd37af8.chunk.js","sourcesContent":["import uuid from 'react-uuid';\r\n\r\nexport default class TodoModel {\r\n    constructor({ text, id = uuid(), isCompleted = false }) {\r\n        this.id = id;\r\n        this.text = text;\r\n        this.isCompleted = isCompleted;\r\n    }\r\n}","import React, {useState} from 'react';\r\n// import TodoModel from '../model/TodoModel';\r\nimport './Todo.css'\r\nimport { Row, Col, Modal, Button } from 'react-bootstrap';\r\n\r\n// component for drawing todo item\r\n// Props:\r\n// todo - TodoModel class - the object to show\r\n// updateTodoStatus - callback function for changing the todo item isCompleted status (e.g: updateTodoStatus(todoId, isCompleted))\r\n// deleteItem - callback function for deleting the current item (e.g: deleteItem(todoId))\r\n// State:\r\n// showDeleteBtn - string - represent className for showing the delete button on mouse over\r\n// completed - boolean - if the item completed or not\r\n// show - boolean - show or hide the delete confirmation model dialog\r\nconst Todo = props  => {\r\n    const { todo, updateTodoStatus, deleteItem } = props;\r\n    const [showDeleteBtn, setShowDeleteBtn] = useState(\"\");\r\n    const [completed, setCompleted] = useState(todo.isCompleted);\r\n    const [show, setShow] = useState(false);\r\n\r\n    const onShowDeleteBtn = (show) => {\r\n        setShowDeleteBtn(show ? \"show-del-button\" : \"\");\r\n    };\r\n    \r\n    const changeStatus = e => {\r\n        setCompleted(e.target.checked);        \r\n        \r\n        updateTodoStatus(todo.id, e.target.checked);\r\n    };\r\n\r\n    const deleteButtonPressed = () => {\r\n        if(todo.isCompleted) {\r\n            deleteItem(todo.id);\r\n        } else {\r\n            setShow(true);\r\n        }        \r\n    };\r\n\r\n    const handleDelete = () => {\r\n        deleteItem(todo.id);\r\n        handleClose();\r\n    }\r\n\r\n    const handleClose = () => setShow(false);\r\n\r\n    return (\r\n        <div className=\"todo-comp\" onMouseOver={() => onShowDeleteBtn(true)} onMouseLeave={() => onShowDeleteBtn(false)}>\r\n            <Row>\r\n                <Col className=\"todo\">\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"todo-item\" checked={completed} onChange={e => changeStatus(e)}/> \r\n                        <span className={completed ? \"todo-text completed-todo\" : \"todo-text\"}>{todo.text}</span>\r\n                    </div>\r\n                    <span className={\"delete-todo \" + showDeleteBtn} onClick={deleteButtonPressed}>x</span>\r\n                </Col>\r\n            </Row>\r\n            \r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Deleting an Item!</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>Are you sure you want to delete this item?</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Cancel\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleDelete}>\r\n                    Delete\r\n                    </Button>\r\n                </Modal.Footer>\r\n                </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React, {useState} from 'react';\r\nimport TodoModel from '../model/TodoModel';\r\nimport { Row, Col, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\r\nimport './Todos.css'\r\nimport Todo from './Todo';\r\n\r\n// This component draws the input, filtering buttons and the todo list.\r\n// State:\r\n// value - string - the value of the input text\r\n// todoList - list of TodoModel class.\r\n// selectedButton - number - the selected filter button index\r\nconst Todos = () => {\r\n    const [value, setValue] = useState(\"\");    \r\n    const [todoList, setTodoList] = useState([]);\r\n    const [selectedButton, setSelectedButton] = useState(1);\r\n    \r\n    const addTodo = (event) => {                \r\n        if(event.keyCode === 13 && (value && value.trim() !== \"\")) {\r\n            setTodoList([...todoList, new TodoModel({ text: value })]);\r\n            setValue(\"\");\r\n        }\r\n    }\r\n\r\n    const updateTodoStatus = (id, isCompleted) => {\r\n        setTodoList(todoList.map(todo => {\r\n            if(id === todo.id) {\r\n                return new TodoModel({ ...todo, isCompleted });\r\n            } else {\r\n                return todo;\r\n            }\r\n        }));\r\n    }\r\n\r\n    const deleteItem = todoId => {\r\n        setTodoList(todoList.filter(({ id }) => id !== todoId));\r\n    }\r\n\r\n    const applyFilter = (value) => {\r\n        setSelectedButton(value);\r\n    }\r\n    \r\n    const filteredList = todoList.filter(todo => {\r\n        if(selectedButton === 1) {\r\n            return true;\r\n        }\r\n\r\n        return selectedButton === 2 ? !todo.isCompleted : todo.isCompleted;\r\n    })\r\n\r\n    const displayList = filteredList.map((todo => <Todo key={todo.id} todo={todo} updateTodoStatus={updateTodoStatus} deleteItem={deleteItem}/>))\r\n    const numberOfItemsLeft = todoList.filter(todo => !todo.isCompleted).length;\r\n\r\n    return (\r\n        <div className=\"todos-comp\">\r\n            <h1>Todos</h1>            \r\n            <Row>\r\n                <Col>\r\n                    <input type=\"text\" value={value} placeholder=\"What's next?\" onChange={(e) => setValue(e.target.value) } onKeyUp={addTodo}/>\r\n                </Col>\r\n            </Row>            \r\n            <Row>\r\n                <Col className=\"todo-list\" md={5}>\r\n                    {displayList}                     \r\n                </Col>                \r\n            </Row>            \r\n            <Row className={todoList.length === 0 ? \"footer hide-footer\" : \"footer\"}>\r\n                <Col md={3}> \r\n                    <p>{numberOfItemsLeft} items left</p>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <ToggleButtonGroup type=\"radio\" name=\"options\"  className=\"filters-area\" value={selectedButton} defaultValue={selectedButton} onChange={applyFilter}>\r\n                        <ToggleButton variant=\"outline-dark\" value={1} className=\"temp\">All</ToggleButton>\r\n                        <ToggleButton variant=\"outline-dark\" value={2}>Active</ToggleButton>\r\n                        <ToggleButton variant=\"outline-dark\" value={3}>Completed</ToggleButton>\r\n                    </ToggleButtonGroup>                \r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todos;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Todos from './components/Todos';\nimport { Container } from 'react-bootstrap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Todos/>\n      </Container>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}